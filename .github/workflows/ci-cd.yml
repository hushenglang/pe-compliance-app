name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: pe-compliance-app
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_REPOSITORY: ${{ secrets.DOCKER_HUB_REPOSITORY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install UV
      run: pip install uv
    
    - name: Install dependencies
      run: |
        uv sync --frozen
    
    - name: Run linting
      run: |
        uv run ruff check src/
      continue-on-error: true
    
    - name: Run type checking
      run: |
        uv run mypy src/
      continue-on-error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug - Check secrets availability
      run: |
        echo "Checking secret availability..."
        echo "DOCKER_HUB_USERNAME is set: ${{ secrets.DOCKER_HUB_USERNAME != '' }}"
        echo "DOCKER_HUB_REPOSITORY is set: ${{ secrets.DOCKER_HUB_REPOSITORY != '' }}"
        echo "DOCKER_HUB_TOKEN is set: ${{ secrets.DOCKER_HUB_TOKEN != '' }}"
        echo "Environment variable DOCKER_HUB_REPOSITORY: '${DOCKER_HUB_REPOSITORY}'"

    - name: Generate image metadata
      id: meta
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="${TIMESTAMP}-${SHORT_SHA}"
        FULL_IMAGE="${DOCKER_HUB_REPOSITORY}:${IMAGE_TAG}"
        echo "tags=${FULL_IMAGE}" >> $GITHUB_OUTPUT
        echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "full-image=${FULL_IMAGE}" >> $GITHUB_OUTPUT
    
    - name: Login to Docker Hub
      run: |
        docker login --username=${{ secrets.DOCKER_HUB_USERNAME }} --password=${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Build Docker image
      id: build
      run: |
        docker build -t ${{ steps.meta.outputs.full-image }} .
        docker tag ${{ steps.meta.outputs.full-image }} ${{ env.DOCKER_HUB_REPOSITORY }}:latest
        echo "digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.meta.outputs.full-image }} 2>/dev/null || echo 'N/A')" >> $GITHUB_OUTPUT
    
    - name: Push Docker image
      run: |
        docker push ${{ steps.meta.outputs.full-image }}
        docker push ${{ env.DOCKER_HUB_REPOSITORY }}:latest
    
    - name: Image security scan
      run: |
        # Install Trivy for security scanning
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan the image
        trivy image --exit-code 0 --severity HIGH,CRITICAL ${{ steps.meta.outputs.full-image }}
      continue-on-error: true

  # deploy:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Deploy to ECS
  #     uses: appleboy/ssh-action@v1.0.3
  #     with:
  #       host: ${{ secrets.ECS_HOST }}
  #       username: ${{ secrets.ECS_USERNAME }}
  #       key: ${{ secrets.ECS_SSH_KEY }}
  #       port: ${{ secrets.ECS_PORT || 22 }}
  #       script: |
  #         # Set variables
  #         IMAGE_NAME="${{ env.IMAGE_NAME }}"
  #         CONTAINER_NAME="${IMAGE_NAME}-container"
  #         NEW_IMAGE="${{ needs.build-and-push.outputs.image-tag }}"
  #         FULL_IMAGE="${{ env.DOCKER_HUB_REPOSITORY }}:latest"
          
  #         # Create deployment directory if it doesn't exist
  #         mkdir -p ~/deployments/${IMAGE_NAME}
  #         cd ~/deployments/${IMAGE_NAME}
          
  #         # Login to Docker Hub
  #         echo "Logging in to Docker Hub..."
  #         docker login --username=${{ secrets.DOCKER_HUB_USERNAME }} --password=${{ secrets.DOCKER_HUB_TOKEN }}
          
  #         # Pull the latest image
  #         echo "Pulling latest image: ${FULL_IMAGE}"
  #         docker pull ${FULL_IMAGE}
          
  #         # Stop and remove existing container if it exists
  #         echo "Stopping existing container..."
  #         docker stop ${CONTAINER_NAME} 2>/dev/null || true
  #         docker rm ${CONTAINER_NAME} 2>/dev/null || true
          
  #         # Remove old images (keep last 3)
  #         echo "Cleaning up old images..."
  #         docker images "${{ env.DOCKER_HUB_REPOSITORY }}" --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | tail -n +2 | head -n -3 | awk '{print $3}' | xargs -r docker rmi 2>/dev/null || true
          
  #         # Create and start new container
  #         echo "Starting new container..."
  #         docker run -d \
  #           --name ${CONTAINER_NAME} \
  #           --restart unless-stopped \
  #           -p 8000:8000 \
  #           --env-file .env \
  #           --health-cmd="curl -f http://localhost:8000/health || exit 1" \
  #           --health-interval=30s \
  #           --health-timeout=10s \
  #           --health-start-period=40s \
  #           --health-retries=3 \
  #           ${FULL_IMAGE}
          
  #         # Wait for container to be healthy
  #         echo "Waiting for container to be healthy..."
  #         for i in {1..30}; do
  #           if [ "$(docker inspect --format='{{.State.Health.Status}}' ${CONTAINER_NAME})" = "healthy" ]; then
  #             echo "Container is healthy!"
  #             break
  #           fi
  #           if [ $i -eq 30 ]; then
  #             echo "Container failed to become healthy"
  #             docker logs ${CONTAINER_NAME}
  #             exit 1
  #           fi
  #           echo "Waiting... ($i/30)"
  #           sleep 10
  #         done
          
  #         # Show deployment status
  #         echo "Deployment completed successfully!"
  #         echo "Container status:"
  #         docker ps --filter name=${CONTAINER_NAME}
  #         echo "Application logs:"
  #         docker logs --tail 20 ${CONTAINER_NAME}

  # notify:
  #   needs: [build-and-push, deploy]
  #   runs-on: ubuntu-latest
  #   if: always() && github.ref == 'refs/heads/main'
    
  #   steps:
  #   - name: Notify deployment status
  #     run: |
  #       if [ "${{ needs.deploy.result }}" = "success" ]; then
  #         echo "✅ Deployment successful!"
  #         echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
  #         echo "Application should be available at: http://${{ secrets.ECS_HOST }}:8000"
  #       else
  #         echo "❌ Deployment failed!"
  #         exit 1 